package com.example.nesadimsergej.test;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class Loyalty extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556004805467ffffffffffffffff19169055612c5b806100436000396000f300608060405260043610620000d15763ffffffff60e060020a6000350416631458f6fd8114620000d657806320dfe7fb1462000142578063336989ae14620001ab578063355e6ce814620001ea5780633b3be49e14620002bb57806375f63ed01462000374578063835331e1146200038f5780638894dd2b14620003c45780638da5cb5b14620003ce57806395ded45c1462000402578063aa2861161462000426578063b831c3f9146200044a578063bbb9b58f1462000494578063c2bb515f1462000500578063dedf34f31462000518575b600080fd5b348015620000e357600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855262000140958335600160a060020a03169536956044949193909101919081908401838280828437509497506200053f9650505050505050565b005b3480156200014f57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526200014094369492936024939284019190819084018382808284375094975050843595505050602083013592604001359150620006c69050565b348015620001b857600080fd5b50620001cf600160a060020a0360043516620009d7565b60408051921515835260208301919091528051918290030190f35b348015620001f757600080fd5b506200020e600160a060020a0360043516620009f6565b604051808615151515815260200185600160a060020a0316600160a060020a0316815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b838110156200027b57818101518382015260200162000261565b50505050905090810190601f168015620002a95780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b348015620002c857600080fd5b50620002df600160a060020a036004351662000aba565b604080518415158152600160a060020a03831691810191909152606060208083018281528551928401929092528451608084019186019080838360005b83811015620003365781810151838201526020016200031c565b50505050905090810190601f168015620003645780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156200038157600080fd5b506200020e60043562000b7b565b3480156200039c57600080fd5b50620003a762000c12565b6040805167ffffffffffffffff9092168252519081900360200190f35b6200014062000c22565b348015620003db57600080fd5b50620003e662000cb8565b60408051600160a060020a039092168252519081900360200190f35b3480156200040f57600080fd5b50620003e6600160a060020a036004351662000cc7565b3480156200043357600080fd5b5062000140600160a060020a036004351662000ce2565b3480156200045757600080fd5b5062000482600160a060020a0360043581169060243581169060443590606435906084351662000f26565b60408051918252519081900360200190f35b348015620004a157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855262000140958335600160a060020a03169536956044949193909101919081908401838280828437509497505093359450620019a39350505050565b3480156200050d57600080fd5b506200014062001d24565b3480156200052557600080fd5b5062000140600160a060020a036004351660243562001dab565b3360008181526002602052604090205460ff16151562000598576040805160e560020a62461bcd028152602060048201526016602482015260008051602062002c10833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260036020526040902054839060ff16156200060c576040805160e560020a62461bcd02815260206004820152601960248201527f436f616c6974696f6e20616c7265616479206578697374732e00000000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600360209081526040909120805460ff1916600190811782558551620006499392909101918601906200220b565b50505050600160a060020a031660008181526003602081815260408084203380865293810183528185208054600160ff1991821681179092556002928301805473ffffffffffffffffffffffffffffffffffffffff1916909617909555908352818520958552600690950190915290912080549091169091179055565b3360008181526002602052604081205490919060ff16151562000722576040805160e560020a62461bcd028152602060048201526016602482015260008051602062002c10833981519152604482015290519081900360640190fd5b3360009081526002602090815260408083205481517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529151610100909104600160a060020a031692638da5cb5b926004808201939182900301818787803b1580156200078f57600080fd5b505af1158015620007a4573d6000803e3d6000fd5b505050506040513d6020811015620007bb57600080fd5b5051600160a060020a03161415620008ee5785858585620007db62002290565b8080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015620008295781810151838201526020016200080f565b50505050905090810190601f168015620008575780820380516001836020036101000a031916815260200191505b5095505050505050604051809103906000f0801580156200087c573d6000803e3d6000fd5b50336000908152600260209081526040808320805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a038716908102919091179091556006909252909120805473ffffffffffffffffffffffffffffffffffffffff191690911790559150620009cf565b81600160a060020a0316632828fa0e878787876040518563ffffffff1660e060020a0281526004018080602001858152602001848152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015620009645781810151838201526020016200094a565b50505050905090810190601f168015620009925780820380516001836020036101000a031916815260200191505b5095505050505050600060405180830381600087803b158015620009b557600080fd5b505af1158015620009ca573d6000803e3d6000fd5b505050505b505050505050565b6001602081905260009182526040909120805491015460ff9091169082565b60026020818152600092835260409283902080546001808301805487516101009382161584026000190190911696909604601f810186900486028701860190975286865260ff83169691909204600160a060020a031694929383018282801562000aa45780601f1062000a785761010080835404028352916020019162000aa4565b820191906000526020600020905b81548152906001019060200180831162000a8657829003601f168201915b5050505050908060020154908060030154905085565b6003602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f810186900486028301860190965285825260ff90921694929390929083018282801562000b625780601f1062000b365761010080835404028352916020019162000b62565b820191906000526020600020905b81548152906001019060200180831162000b4457829003601f168201915b50505060029093015491925050600160a060020a031683565b600580548290811062000b8a57fe5b6000918252602091829020600791909102018054600180830180546040805160026101009584161586026000190190931692909204601f810188900488028301880190915280825260ff8516975092909304600160a060020a03169490919083018282801562000aa45780601f1062000a785761010080835404028352916020019162000aa4565b60045467ffffffffffffffff1681565b3360008181526002602052604090205460ff16151562000c7b576040805160e560020a62461bcd028152602060048201526016602482015260008051602062002c10833981519152604482015290519081900360640190fd5b336000908152600260208190526040909120015462000ca1903463ffffffff62001f1316565b336000908152600260208190526040909120015550565b600054600160a060020a031681565b600660205260009081526040902054600160a060020a031681565b3360008181526002602052604081205490919060ff16151562000d3e576040805160e560020a62461bcd028152602060048201526016602482015260008051602062002c10833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260036020526040902054839060ff16151562000db3576040805160e560020a62461bcd02815260206004820152601860248201527f436f616c6974696f6e20646f65736e27742065786973742e0000000000000000604482015290519081900360640190fd5b60408051808201909152601b8082527f496469206e6168756920676f6d6f666f626e7920706964617261730000000000602090920191825262000df89185916200220b565b5060018301805473ffffffffffffffffffffffffffffffffffffffff191633178082556000919074ff0000000000000000000000000000000000000000191660a060020a830217905550600160a060020a03808516600090815260036020908152604080832060029081015490941683528382528220600401805460018181018084559285529290932087549194889481029091019262000eac9284928692821615610100026000190190911604620022a1565b5060018281018054918301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390931692909217808355905460ff60a060020a9182900416929174ff000000000000000000000000000000000000000019169083600081111562000f1857fe5b021790555050505050505050565b6000805481908190819081908190600160a060020a0316331462000f4957600080fd5b600160a060020a038a166000908152600160205260409020548a9060ff16151562000fbe576040805160e560020a62461bcd02815260206004820152601760248201527f437573746f6d657220646f65736e27742065786973742e000000000000000000604482015290519081900360640190fd5b600160a060020a038c166000908152600260205260409020548c9060ff16151562001022576040805160e560020a62461bcd028152602060048201526016602482015260008051602062002c10833981519152604482015290519081900360640190fd5b5a600160a060020a03808f16600090815260026020526040902054919850610100909104169550891515620011c157620010d086600160a060020a031663d3d1b0966040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200109457600080fd5b505af1158015620010a9573d6000803e3d6000fd5b505050506040513d6020811015620010c057600080fd5b50518c9063ffffffff62001f7516565b945085600160a060020a031663beabacc88e8e886040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050600060405180830381600087803b1580156200115057600080fd5b505af115801562001165573d6000803e3d6000fd5b505050600160a060020a03808e166000908152600160208181526040808420948c16845260029094019052919020805460ff1916909117905550620011ac5a880362001fe8565b1515620011b857600080fd5b84975062001993565b88600160a060020a031686600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200120a57600080fd5b505af11580156200121f573d6000803e3d6000fd5b505050506040513d60208110156200123657600080fd5b5051600160a060020a031614156200137a57620012c786600160a060020a0316630d4830fc6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200128b57600080fd5b505af1158015620012a0573d6000803e3d6000fd5b505050506040513d6020811015620012b757600080fd5b5051869063ffffffff62001f7516565b9350620012db8b8563ffffffff62001f1316565b9a5085600160a060020a031663beabacc88d8f886040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050600060405180830381600087803b1580156200135b57600080fd5b505af115801562001370573d6000803e3d6000fd5b5050505062001976565b600160a060020a038d8116600090815260026020818152604092839020835160e081018552815460ff8116151582526101009081900490961681840152600180830180548751928116159098026000190190971694909404601f8101849004840285018401865280855262001876969195929492860193830182828015620014465780601f106200141a5761010080835404028352916020019162001446565b820191906000526020600020905b8154815290600101906020018083116200142857829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b828210156200158b5760008481526020908190206040805160028681029093018054600181161561010002600019011693909304601f8101859004909402810160809081019092526060810184815290938492849190840182828015620015335780601f10620015075761010080835404028352916020019162001533565b820191906000526020600020905b8154815290600101906020018083116200151557829003601f168201915b50505091835250506001820154600160a060020a038116602083015260409091019060a060020a900460ff1660008111156200156b57fe5b60008111156200157757fe5b815250508152602001906001019062001488565b50505050815260200160058201805480602002602001604051908101604052809291908181526020018280548015620015ee57602002820191906000526020600020905b8154600160a060020a03168152600190910190602001808311620015cf575b50505091909252505050600160a060020a038b8116600090815260026020818152604092839020835160e081018552815460ff8116151582526101009081900490961681840152600180830180548751928116159098026000190190971694909404601f810184900484028501840186528085529095919486019392830182828015620016bf5780601f106200169357610100808354040283529160200191620016bf565b820191906000526020600020905b815481529060010190602001808311620016a157829003601f168201915b50505050508152602001600282015481526020016003820154815260200160048201805480602002602001604051908101604052809291908181526020016000905b82821015620018045760008481526020908190206040805160028681029093018054600181161561010002600019011693909304601f8101859004909402810160809081019092526060810184815290938492849190840182828015620017ac5780601f106200178057610100808354040283529160200191620017ac565b820191906000526020600020905b8154815290600101906020018083116200178e57829003601f168201915b50505091835250506001820154600160a060020a038116602083015260409091019060a060020a900460ff166000811115620017e457fe5b6000811115620017f057fe5b815250508152602001906001019062001701565b505050508152602001600582018054806020026020016040519081016040528092919081815260200182805480156200186757602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831162001848575b505050505081525050620020ed565b9250600160a060020a03831615156200188e57600080fd5b620018d186600160a060020a0316639e65741e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b1580156200128b57600080fd5b9350620018e58b8563ffffffff62001f1316565b604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a038f811660048301528c81166024830152604482018990529151929d509088169163beabacc89160648082019260009290919082900301818387803b1580156200195c57600080fd5b505af115801562001971573d6000803e3d6000fd5b505050505b620019835a880362001fe8565b15156200198f57600080fd5b8a97505b5050505050505095945050505050565b600054600160a060020a03163314620019bb57600080fd5b600160a060020a038316600090815260026020526040902054839060ff161562001a2f576040805160e560020a62461bcd02815260206004820152601760248201527f436f6d70616e7920616c7265616479206578697374732e000000000000000000604482015290519081900360640190fd5b600160a060020a038416600090815260016020526040902054849060ff161562001aa3576040805160e560020a62461bcd02815260206004820152601860248201527f437573746f6d657220616c7265616479206578697374732e0000000000000000604482015290519081900360640190fd5b6004805467ffffffffffffffff198116600167ffffffffffffffff928316810190921617909155600160a060020a0386166000908152600260209081526040909120805460ff191683178155865162001b049391909101918701906200220b565b50600160a060020a03808616600090815260026020819052604082206003810187905560058054600181810180845592909552825460079091027f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db08101805460ff909316151560ff1990931692909217808355845461010090819004909816880274ffffffffffffffffffffffffffffffffffffffff0019909116178255858401805493979496929562001beb957f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db1909301949193821615909202600019011604620022a1565b506002820154816002015560038201548160030155600482018160040190805462001c189291906200231b565b506005828101805462001c2f928401919062002409565b50505050600160a060020a0385166000818152600260208181526040808420600180845294829020850154825196875291860182905260609286018381529085018054958616156101000260001901909516939093049185018290527f9d70bee0bb385f274571a8a687d1021a577dfcda5c0005f2d367eff2a390bcf8948a9493919290919060808301908590801562001d0d5780601f1062001ce15761010080835404028352916020019162001d0d565b820191906000526020600020905b81548152906001019060200180831162001cef57829003601f168201915b505094505050505060405180910390a15050505050565b3360008181526002602052604081205490919060ff16151562001d80576040805160e560020a62461bcd028152602060048201526016602482015260008051602062002c10833981519152604482015290519081900360640190fd5b3360009081526002602052604090206004018054600019810190811062001da357fe5b506000525050565b600054600160a060020a0316331462001dc357600080fd5b600160a060020a038216600090815260016020526040902054829060ff161562001e37576040805160e560020a62461bcd02815260206004820152601860248201527f437573746f6d657220616c7265616479206578697374732e0000000000000000604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054839060ff161562001eab576040805160e560020a62461bcd02815260206004820152601760248201527f436f6d70616e7920616c7265616479206578697374732e000000000000000000604482015290519081900360640190fd5b600160a060020a038416600081815260016020818152604092839020805460ff1916831781559091018690558151928352820185905280517fb01f03e9e9f2b7bc3cc53c04150b1bb15c120b77d3fa2edadbfaf05c799a0da59281900390910190a150505050565b8181018281101562001f6f576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c6964206164646974696f6e00000000000000000000000000000000604482015290519081900360640190fd5b92915050565b81810282158062001f91575081838281151562001f8e57fe5b04145b151562001f6f576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c6964206d756c7469706c69636174696f6e00000000000000000000604482015290519081900360640190fd5b336000818152600260205260408120549091829160ff16151562002045576040805160e560020a62461bcd028152602060048201526016602482015260008051602062002c10833981519152604482015290519081900360640190fd5b33600090815260026020819052604090912001543a850292508211156200206b57600080fd5b336000908152600260208190526040909120015462002091908363ffffffff620021aa16565b3360009081526002602081905260408083209091019290925580549151600160a060020a03909216916108fc85150291859190818181858888f19350505050158015620020e2573d6000803e3d6000fd5b506001949350505050565b600080805b8460c00151518210156200219d575060005b8360c0015151811015620021915760c08401518051829081106200212457fe5b90602001906020020151600160a060020a03168560c00151838151811015156200214a57fe5b90602001906020020151600160a060020a03161415620021885760c08501518051839081106200217657fe5b906020019060200201519250620021a2565b60010162002104565b600190910190620020f2565b600092505b505092915050565b60008282111562002205576040805160e560020a62461bcd02815260206004820152601360248201527f496e76616c6964207375627472616374696f6e00000000000000000000000000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200224e57805160ff19168380011785556200227e565b828001600101855582156200227e579182015b828111156200227e57825182559160200191906001019062002261565b506200228c9291506200245a565b5090565b6040516106ce806200254283390190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620022dc57805485556200227e565b828001600101855582156200227e57600052602060002091601f016020900482015b828111156200227e578254825591600101919060010190620022fe565b828054828255906000526020600020906002028101928215620023fb5760005260206000209160020282015b82811115620023fb5782548390839062002378908290849060026000196101006001841615020190911604620022a1565b5060018281018054918301805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0390931692909217808355905460ff60a060020a9182900416929174ff0000000000000000000000000000000000000000191690836000811115620023e457fe5b021790555050509160020191906002019062002347565b506200228c9291506200247a565b8280548282559060005260206000209081019282156200244c5760005260206000209182015b828111156200244c5782548255916001019190600101906200242f565b506200228c929150620024c2565b6200247791905b808211156200228c576000815560010162002461565b90565b6200247791905b808211156200228c576000620024988282620024f6565b5060018101805474ffffffffffffffffffffffffffffffffffffffffff1916905560020162002481565b6200247791905b808211156200228c57805473ffffffffffffffffffffffffffffffffffffffff19168155600101620024c9565b50805460018160011615610100020316600290046000825580601f106200251e57506200253e565b601f0160209004906000526020600020908101906200253e91906200245a565b505600608060405234801561001057600080fd5b506040516106ce3803806106ce8339810160409081528151602083015191830151606084015160028054600160a060020a031916331790559190930192906100638484848464010000000061006c810204565b50505050610141565b600254600160a060020a0316331461008357600080fd5b83516100969060019060208701906100a6565b5060039290925560045560055550565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100e757805160ff1916838001178555610114565b82800160010185558215610114579182015b828111156101145782518255916020019190600101906100f9565b50610120929150610124565b5090565b61013e91905b80821115610120576000815560010161012a565b90565b61057e806101506000396000f30060806040526004361061008d5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630d4830fc81146100925780632828fa0e146100b957806370a08231146101215780638da5cb5b146101425780639e65741e14610173578063beabacc814610188578063c04f319a146101b2578063d3d1b096146101ca575b600080fd5b34801561009e57600080fd5b506100a76101df565b60408051918252519081900360200190f35b3480156100c557600080fd5b506040805160206004803580820135601f810184900484028501840190955284845261011f943694929360249392840191908190840183828082843750949750508435955050506020830135926040013591506101e59050565b005b34801561012d57600080fd5b506100a7600160a060020a036004351661021f565b34801561014e57600080fd5b5061015761023a565b60408051600160a060020a039092168252519081900360200190f35b34801561017f57600080fd5b506100a7610249565b34801561019457600080fd5b5061011f600160a060020a036004358116906024351660443561024f565b3480156101be57600080fd5b5061011f600435610362565b3480156101d657600080fd5b506100a76103c2565b60045481565b600254600160a060020a031633146101fc57600080fd5b835161020f9060019060208701906104b7565b5060039290925560045560055550565b600160a060020a031660009081526020819052604090205490565b600254600160a060020a031681565b60055481565b600254600160a060020a0316331461026657600080fd5b600254600160a060020a03848116911614801561029c5750600254600160a060020a031660009081526020819052604090205481115b156102aa576102aa81610362565b600160a060020a0383166000908152602081905260409020546102d3908263ffffffff6103c816565b600160a060020a038085166000908152602081905260408082209390935590841681522054610308908263ffffffff61043f16565b600160a060020a038084166000818152602081815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600254600160a060020a0316331461037957600080fd5b600254600160a060020a03166000908152602081905260409020546103a4908263ffffffff61043f16565b600254600160a060020a031660009081526020819052604090205550565b60035481565b60008282111561043957604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f496e76616c6964207375627472616374696f6e00000000000000000000000000604482015290519081900360640190fd5b50900390565b818101828110156104b157604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f496e76616c6964206164646974696f6e00000000000000000000000000000000604482015290519081900360640190fd5b92915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106104f857805160ff1916838001178555610525565b82800160010185558215610525579182015b8281111561052557825182559160200191906001019061050a565b50610531929150610535565b5090565b61054f91905b80821115610531576000815560010161053b565b905600a165627a7a72305820744d19534e7093f69adc61d83619a456ec0ed86b375d7403ff46667a201055510029436f6d70616e7920646f65736e27742065786973742e00000000000000000000a165627a7a723058203bdefe50032f9ff702d4dc49417f5a96fc3caec67a9d905af338ba34a151678c0029";

    protected Loyalty(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Loyalty(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<AddCompanyEventResponse> getAddCompanyEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddCompany", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<AddCompanyEventResponse> responses = new ArrayList<AddCompanyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddCompanyEventResponse typedResponse = new AddCompanyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.companyAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.phoneNumber = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddCompanyEventResponse> addCompanyEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddCompany", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddCompanyEventResponse>() {
            @Override
            public AddCompanyEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                AddCompanyEventResponse typedResponse = new AddCompanyEventResponse();
                typedResponse.log = log;
                typedResponse.companyAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.phoneNumber = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<AddCustomerEventResponse> getAddCustomerEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddCustomer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<AddCustomerEventResponse> responses = new ArrayList<AddCustomerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddCustomerEventResponse typedResponse = new AddCustomerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddCustomerEventResponse> addCustomerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddCustomer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddCustomerEventResponse>() {
            @Override
            public AddCustomerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                AddCustomerEventResponse typedResponse = new AddCustomerEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LoggedInEventResponse> getLoggedInEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LoggedIn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LoggedInEventResponse> responses = new ArrayList<LoggedInEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LoggedInEventResponse typedResponse = new LoggedInEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LoggedInEventResponse> loggedInEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LoggedIn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LoggedInEventResponse>() {
            @Override
            public LoggedInEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LoggedInEventResponse typedResponse = new LoggedInEventResponse();
                typedResponse.log = log;
                typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> addCoalition(String coalition, String _name) {
        final Function function = new Function(
                "addCoalition", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(coalition), 
                new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setToken(String _name, BigInteger _inPrice, BigInteger _outPrice, BigInteger _exchangePrice) {
        final Function function = new Function(
                "setToken", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_inPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(_outPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(_exchangePrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<Boolean, BigInteger>> customers(String param0) {
        final Function function = new Function("customers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<Boolean, BigInteger>>(
                new Callable<Tuple2<Boolean, BigInteger>>() {
                    @Override
                    public Tuple2<Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<Boolean, String, String, BigInteger, BigInteger>> companies(String param0) {
        final Function function = new Function("companies", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<Boolean, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple5<Boolean, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<Boolean, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Boolean, String, String, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<Tuple3<Boolean, String, String>> coalitions(String param0) {
        final Function function = new Function("coalitions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple3<Boolean, String, String>>(
                new Callable<Tuple3<Boolean, String, String>>() {
                    @Override
                    public Tuple3<Boolean, String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Boolean, String, String>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Tuple5<Boolean, String, String, BigInteger, BigInteger>> companySet(BigInteger param0) {
        final Function function = new Function("companySet", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple5<Boolean, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple5<Boolean, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<Boolean, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Boolean, String, String, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> companiesCount() {
        final Function function = new Function("companiesCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addEther(BigInteger weiValue) {
        final Function function = new Function(
                "addEther", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> allTokens(String param0) {
        final Function function = new Function("allTokens", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> inviteToCoalition(String coalition) {
        final Function function = new Function(
                "inviteToCoalition", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(coalition)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferBonuses(String company, String customer, BigInteger roublesAmount, BigInteger bonusesAmount, String tokenOwner) {
        final Function function = new Function(
                "transferBonuses", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company), 
                new org.web3j.abi.datatypes.Address(customer), 
                new org.web3j.abi.datatypes.generated.Uint256(roublesAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(bonusesAmount), 
                new org.web3j.abi.datatypes.Address(tokenOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCompany(String company, String _name, BigInteger _phoneNumber) {
        final Function function = new Function(
                "addCompany", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_phoneNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getRequest() {
        final Function function = new Function(
                "getRequest", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCustomer(String customer, BigInteger _phoneNumber) {
        final Function function = new Function(
                "addCustomer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(customer), 
                new org.web3j.abi.datatypes.generated.Uint256(_phoneNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<Loyalty> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Loyalty.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Loyalty> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Loyalty.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Loyalty load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Loyalty(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Loyalty load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Loyalty(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AddCompanyEventResponse {
        public Log log;

        public String companyAddress;

        public String name;

        public BigInteger phoneNumber;
    }

    public static class AddCustomerEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger number;
    }

    public static class LoggedInEventResponse {
        public Log log;

        public String _address;

        public BigInteger number;
    }
}
