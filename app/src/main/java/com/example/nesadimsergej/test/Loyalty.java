package com.example.nesadimsergej.test;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.3.1.
 */
public class Loyalty extends Contract {
    private static final String BINARY = "608060405234801561001057600080fd5b5060008054600160a060020a031916331790556004805467ffffffffffffffff19169055612778806100436000396000f3006080604052600436106100cc5763ffffffff60e060020a6000350416631458f6fd81146100d157806320dfe7fb1461013a578063336989ae146101a0578063355e6ce8146101dc5780633b3be49e146102c057806375f63ed014610364578063835331e11461037c5780638894dd2b146103ae5780638da5cb5b146103b657806395ded45c146103e7578063aa28611614610408578063b831c3f914610429578063bbb9b58f14610470578063c2bb515f146104d9578063dde96ff414610542578063dedf34f314610568575b600080fd5b3480156100dd57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610138958335600160a060020a031695369560449491939091019190819084018382808284375094975061058c9650505050505050565b005b34801561014657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101389436949293602493928401919081908401838280828437509497505084359550505060208301359260400135915061070d9050565b3480156101ac57600080fd5b506101c1600160a060020a0360043516610859565b60408051921515835260208301919091528051918290030190f35b3480156101e857600080fd5b506101fd600160a060020a0360043516610878565b604051808715151515815260200186600160a060020a0316600160a060020a0316815260200185600160a060020a0316600160a060020a0316815260200180602001848152602001838152602001828103825285818151815260200191508051906020019080838360005b83811015610280578181015183820152602001610268565b50505050905090810190601f1680156102ad5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b3480156102cc57600080fd5b506102e1600160a060020a0360043516610943565b604051808315151515815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610328578181015183820152602001610310565b50505050905090810190601f1680156103555780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b34801561037057600080fd5b506101fd6004356109f1565b34801561038857600080fd5b50610391610a8c565b6040805167ffffffffffffffff9092168252519081900360200190f35b610138610a9c565b3480156103c257600080fd5b506103cb610b2c565b60408051600160a060020a039092168252519081900360200190f35b3480156103f357600080fd5b506103cb600160a060020a0360043516610b3b565b34801561041457600080fd5b50610138600160a060020a0360043516610b56565b34801561043557600080fd5b5061045e600160a060020a03600435811690602435811690604435906064359060843516610d4f565b60408051918252519081900360200190f35b34801561047c57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610138958335600160a060020a0316953695604494919390910191908190840183828082843750949750509335945061179c9350505050565b3480156104e557600080fd5b506104ee611b6e565b604051808060200183600160a060020a0316600160a060020a031681526020018281038252848181518152602001915080519060200190808383600083811015610328578181015183820152602001610310565b34801561054e57600080fd5b50610138600160a060020a03600435166024351515611caa565b34801561057457600080fd5b50610138600160a060020a0360043516602435611fd3565b600054600160a060020a031633146105a357600080fd5b600160a060020a038216600090815260026020526040902054829060ff161515610605576040805160e560020a62461bcd028152602060048201526016602482015260008051602061272d833981519152604482015290519081900360640190fd5b600160a060020a038316600090815260036020526040902054839060ff1615610678576040805160e560020a62461bcd02815260206004820152601960248201527f436f616c6974696f6e20616c7265616479206578697374732e00000000000000604482015290519081900360640190fd5b600160a060020a0384166000908152600360209081526040909120805460ff19166001908117825585516106b3939290910191860190612418565b50505050600160a060020a03166000818152600360209081526040808320600290810183528184208054600160ff199182168117909255338652918452828520958552600790950190925290912080549091169091179055565b3360008181526002602052604081205490919060ff161515610767576040805160e560020a62461bcd028152602060048201526016602482015260008051602061272d833981519152604482015290519081900360640190fd5b3360009081526002602090815260408083206001015481517f8da5cb5b0000000000000000000000000000000000000000000000000000000081529151600160a060020a0390911692638da5cb5b926004808201939182900301818787803b1580156107d257600080fd5b505af11580156107e6573d6000803e3d6000fd5b505050506040513d60208110156107fc57600080fd5b5051600160a060020a03161415610851573360009081526002602090815260408083206001018054600160a060020a038716600160a060020a0319918216811790925560069093529220805490911690911790555b505050505050565b6001602081905260009182526040909120805491015460ff9091169082565b6002602081815260009283526040928390208054600180830154838601805488516101009482161585026000190190911697909704601f810187900487028801870190985287875260ff84169792909304600160a060020a03908116969116949092919083018282801561092d5780601f106109025761010080835404028352916020019161092d565b820191906000526020600020905b81548152906001019060200180831161091057829003601f168201915b5050505050908060030154908060040154905086565b6003602090815260009182526040918290208054600180830180548651600261010094831615949094026000190190911692909204601f810186900486028301860190965285825260ff9092169492939092908301828280156109e75780601f106109bc576101008083540402835291602001916109e7565b820191906000526020600020905b8154815290600101906020018083116109ca57829003601f168201915b5050505050905082565b60058054829081106109ff57fe5b600091825260209182902060089190910201805460018083015460028085018054604080516101009683161587026000190190921693909304601f810189900489028201890190935282815260ff8616985093909404600160a060020a0390811696921694939183018282801561092d5780601f106109025761010080835404028352916020019161092d565b60045467ffffffffffffffff1681565b3360008181526002602052604090205460ff161515610af3576040805160e560020a62461bcd028152602060048201526016602482015260008051602061272d833981519152604482015290519081900360640190fd5b33600090815260026020526040902060030154610b16903463ffffffff61213816565b3360009081526002602052604090206003015550565b600054600160a060020a031681565b600660205260009081526040902054600160a060020a031681565b3360008181526002602052604081205490919060ff161515610bb0576040805160e560020a62461bcd028152602060048201526016602482015260008051602061272d833981519152604482015290519081900360640190fd5b3360008181526003602052604090205460ff161515610c19576040805160e560020a62461bcd02815260206004820152601860248201527f436f616c6974696f6e20646f65736e27742065786973742e0000000000000000604482015290519081900360640190fd5b60408051808201909152601b8082527f496469206e6168756920676f6d6f666f626e79207069646172617300000000006020909201918252610c5c918591612418565b5060018381018054600160a060020a031916331774ff000000000000000000000000000000000000000019169055600160a060020a0385166000908152600260208181526040832060050180548086018083559185529190932087549394889492840290910192610ce3928492869261010091831615919091026000190190911604612496565b50600182810180549183018054600160a060020a031916600160a060020a0390931692909217808355905460ff60a060020a9182900416929174ff0000000000000000000000000000000000000000191690836000811115610d4157fe5b021790555050505050505050565b6000805481908190819081908190600160a060020a03163314610d7157600080fd5b600160a060020a038a166000908152600160205260409020548a9060ff161515610de5576040805160e560020a62461bcd02815260206004820152601760248201527f437573746f6d657220646f65736e27742065786973742e000000000000000000604482015290519081900360640190fd5b600160a060020a038c166000908152600260205260409020548c9060ff161515610e47576040805160e560020a62461bcd028152602060048201526016602482015260008051602061272d833981519152604482015290519081900360640190fd5b5a600160a060020a03808f16600090815260026020526040902060010154919850169550891515610fd757610eec86600160a060020a031663d3d1b0966040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610eb357600080fd5b505af1158015610ec7573d6000803e3d6000fd5b505050506040513d6020811015610edd57600080fd5b50518c9063ffffffff61219916565b945085600160a060020a031663beabacc88e8e886040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050600060405180830381600087803b158015610f6b57600080fd5b505af1158015610f7f573d6000803e3d6000fd5b505050600160a060020a03808e166000908152600160208181526040808420948c16845260029094019052919020805460ff1916909117905550610fc45a8803612209565b1515610fcf57600080fd5b84975061178c565b88600160a060020a031686600160a060020a0316638da5cb5b6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561101f57600080fd5b505af1158015611033573d6000803e3d6000fd5b505050506040513d602081101561104957600080fd5b5051600160a060020a03161415611182576110d486600160a060020a0316630d4830fc6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561109b57600080fd5b505af11580156110af573d6000803e3d6000fd5b505050506040513d60208110156110c557600080fd5b5051869063ffffffff61219916565b93506110e68b8563ffffffff61213816565b9a5085600160a060020a031663beabacc88d8f886040518463ffffffff1660e060020a0281526004018084600160a060020a0316600160a060020a0316815260200183600160a060020a0316600160a060020a031681526020018281526020019350505050600060405180830381600087803b15801561116557600080fd5b505af1158015611179573d6000803e3d6000fd5b50505050611772565b600160a060020a038d811660009081526002602081815260409283902083516101008082018652825460ff8116151583528190048716828501526001808401549097168287015282850180548751988116159092026000190190911694909404601f810184900484028701840190955284865261167995909491936060860193919290918301828280156112575780601f1061122c57610100808354040283529160200191611257565b820191906000526020600020905b81548152906001019060200180831161123a57829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b828210156113945760008481526020908190206040805160028681029093018054600181161561010002600019011693909304601f810185900490940281016080908101909252606081018481529093849284919084018282801561133f5780601f106113145761010080835404028352916020019161133f565b820191906000526020600020905b81548152906001019060200180831161132257829003601f168201915b50505091835250506001820154600160a060020a038116602083015260409091019060a060020a900460ff16600081111561137657fe5b600081111561138157fe5b8152505081526020019060010190611299565b505050508152602001600682018054806020026020016040519081016040528092919081815260200182805480156113f557602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116113d7575b50505091909252505050600160a060020a038b811660009081526002602081815260409283902083516101008082018652825460ff8116151583528190048716828501526001808401549097168287015282850180548751988116159092026000190190911694909404601f8101849004840287018401909552848652949093606086019391928301828280156114cd5780601f106114a2576101008083540402835291602001916114cd565b820191906000526020600020905b8154815290600101906020018083116114b057829003601f168201915b50505050508152602001600382015481526020016004820154815260200160058201805480602002602001604051908101604052809291908181526020016000905b8282101561160a5760008481526020908190206040805160028681029093018054600181161561010002600019011693909304601f81018590049094028101608090810190925260608101848152909384928491908401828280156115b55780601f1061158a576101008083540402835291602001916115b5565b820191906000526020600020905b81548152906001019060200180831161159857829003601f168201915b50505091835250506001820154600160a060020a038116602083015260409091019060a060020a900460ff1660008111156115ec57fe5b60008111156115f757fe5b815250508152602001906001019061150f565b5050505081526020016006820180548060200260200160405190810160405280929190818152602001828054801561166b57602002820191906000526020600020905b8154600160a060020a0316815260019091019060200180831161164d575b505050505081525050612304565b9250600160a060020a038316151561169057600080fd5b6116d186600160a060020a0316639e65741e6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561109b57600080fd5b93506116e38b8563ffffffff61213816565b604080517fbeabacc8000000000000000000000000000000000000000000000000000000008152600160a060020a038f811660048301528c81166024830152604482018990529151929d509088169163beabacc89160648082019260009290919082900301818387803b15801561175957600080fd5b505af115801561176d573d6000803e3d6000fd5b505050505b61177d5a8803612209565b151561178857600080fd5b8a97505b5050505050505095945050505050565b600054600160a060020a031633146117b357600080fd5b600160a060020a038316600090815260026020526040902054839060ff1615611826576040805160e560020a62461bcd02815260206004820152601760248201527f436f6d70616e7920616c7265616479206578697374732e000000000000000000604482015290519081900360640190fd5b600160a060020a038416600090815260016020526040902054849060ff1615611899576040805160e560020a62461bcd02815260206004820152601860248201527f437573746f6d657220616c7265616479206578697374732e0000000000000000604482015290519081900360640190fd5b6004805467ffffffffffffffff198116600167ffffffffffffffff928316810190921617909155600160a060020a0386166000818152600260208181526040909220805474ffffffffffffffffffffffffffffffffffffffff0019166101009094029390931760ff19169093178255865161191c93929092019190870190612418565b50600160a060020a0385811660009081526002602081905260408220600481018790556005805460018082018084559290955282547f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db06008909202918201805460ff191660ff909216151591909117808255845474ffffffffffffffffffffffffffffffffffffffff00199091166101009182900489168202178255868501547f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db18401805491909916600160a060020a0319909116179097558385018054939794969195611a3d957f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db290940194919392821615909202600019011604612496565b5060038201548160030155600482015481600401556005820181600501908054611a6892919061250b565b5060068281018054611a7d92840191906125e4565b50505050600160a060020a0385166000818152600260208181526040808420600180845294829020850154825196875291860182905260609286018381529084018054958616156101000260001901909516939093049185018290527f9d70bee0bb385f274571a8a687d1021a577dfcda5c0005f2d367eff2a390bcf8948a94939192909190608083019085908015611b575780601f10611b2c57610100808354040283529160200191611b57565b820191906000526020600020905b815481529060010190602001808311611b3a57829003601f168201915b505094505050505060405180910390a15050505050565b33600081815260026020526040812054606092829160ff161515611bca576040805160e560020a62461bcd028152602060048201526016602482015260008051602061272d833981519152604482015290519081900360640190fd5b33600090815260026020526040902060050180546000198101908110611bec57fe5b600091825260209182902060029182020160018181015482546040805161010094831615949094026000190190911694909404601f81018690048602830186019094528382529195508593600160a060020a03909216929091849190830182828015611c995780601f10611c6e57610100808354040283529160200191611c99565b820191906000526020600020905b815481529060010190602001808311611c7c57829003601f168201915b505050505091509350935050509091565b336000818152600260205260408120549091829182919060ff161515611d08576040805160e560020a62461bcd028152602060048201526016602482015260008051602061272d833981519152604482015290519081900360640190fd5b600091505b33600090815260026020526040902060050154821015611d87573360009081526002602052604090206005018054600160a060020a038816919084908110611d5157fe5b6000918252602090912060016002909202010154600160a060020a03161415611d7c57600193508192505b600190910190611d0d565b831515611e04576040805160e560020a62461bcd02815260206004820152602d60248201527f596f7527726520747279696e6720746f2061736e7765722061206e6f6e65786960448201527f7374696e67207265717565737400000000000000000000000000000000000000606482015290519081900360840190fd5b8415611e3c57600160a060020a03861660009081526003602090815260408083203384526002019091529020805460ff191660011790555b336000908152600260205260409020600501805484908110611e5a57fe5b60009182526020822060029091020190611e748282612630565b506001908101805474ffffffffffffffffffffffffffffffffffffffffff19169055830191505b33600090815260026020526040902060050154821015611fa757336000908152600260205260409020600501805483908110611ed357fe5b600091825260208083203384526002918290526040909320600501805491909202909201916000198501908110611f0657fe5b600091825260209091208254600292830290910191611f379183918591600019610100600183161502011604612496565b50600182810180549183018054600160a060020a031916600160a060020a0390931692909217808355905460ff60a060020a9182900416929174ff0000000000000000000000000000000000000000191690836000811115611f9557fe5b02179055505060019092019150611e9b565b33600090815260026020526040902060050180546000190190611fca9082612677565b50505050505050565b600054600160a060020a03163314611fea57600080fd5b600160a060020a038216600090815260016020526040902054829060ff161561205d576040805160e560020a62461bcd02815260206004820152601860248201527f437573746f6d657220616c7265616479206578697374732e0000000000000000604482015290519081900360640190fd5b600160a060020a038316600090815260026020526040902054839060ff16156120d0576040805160e560020a62461bcd02815260206004820152601760248201527f436f6d70616e7920616c7265616479206578697374732e000000000000000000604482015290519081900360640190fd5b600160a060020a038416600081815260016020818152604092839020805460ff1916831781559091018690558151928352820185905280517fb01f03e9e9f2b7bc3cc53c04150b1bb15c120b77d3fa2edadbfaf05c799a0da59281900390910190a150505050565b81810182811015612193576040805160e560020a62461bcd02815260206004820152601060248201527f496e76616c6964206164646974696f6e00000000000000000000000000000000604482015290519081900360640190fd5b92915050565b8181028215806121b357508183828115156121b057fe5b04145b1515612193576040805160e560020a62461bcd02815260206004820152601660248201527f496e76616c6964206d756c7469706c69636174696f6e00000000000000000000604482015290519081900360640190fd5b336000818152600260205260408120549091829160ff161515612264576040805160e560020a62461bcd028152602060048201526016602482015260008051602061272d833981519152604482015290519081900360640190fd5b336000908152600260205260409020600301543a8502925082111561228857600080fd5b336000908152600260205260409020600301546122ab908363ffffffff6123b816565b336000908152600260205260408082206003019290925580549151600160a060020a03909216916108fc85150291859190818181858888f193505050501580156122f9573d6000803e3d6000fd5b506001949350505050565b600080805b8460e00151518210156123ab575060005b8360e00151518110156123a05760e084015180518290811061233857fe5b90602001906020020151600160a060020a03168560e001518381518110151561235d57fe5b90602001906020020151600160a060020a031614156123985760e085015180518390811061238757fe5b9060200190602002015192506123b0565b60010161231a565b600190910190612309565b600092505b505092915050565b600082821115612412576040805160e560020a62461bcd02815260206004820152601360248201527f496e76616c6964207375627472616374696f6e00000000000000000000000000604482015290519081900360640190fd5b50900390565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061245957805160ff1916838001178555612486565b82800160010185558215612486579182015b8281111561248657825182559160200191906001019061246b565b506124929291506126a8565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106124cf5780548555612486565b8280016001018555821561248657600052602060002091601f016020900482015b828111156124865782548255916001019190600101906124f0565b8280548282559060005260206000209060020281019282156125d85760005260206000209160020282015b828111156125d857825483908390612564908290849060026000196101006001841615020190911604612496565b50600182810180549183018054600160a060020a031916600160a060020a0390931692909217808355905460ff60a060020a9182900416929174ff00000000000000000000000000000000000000001916908360008111156125c257fe5b0217905550505091600201919060020190612536565b506124929291506126c5565b8280548282559060005260206000209081019282156126245760005260206000209182015b82811115612624578254825591600101919060010190612609565b50612492929150612708565b50805460018160011615610100020316600290046000825580601f106126565750612674565b601f01602090049060005260206000209081019061267491906126a8565b50565b8154818355818111156126a3576002028160020283600052602060002091820191016126a391906126c5565b505050565b6126c291905b8082111561249257600081556001016126ae565b90565b6126c291905b808211156124925760006126df8282612630565b5060018101805474ffffffffffffffffffffffffffffffffffffffffff191690556002016126cb565b6126c291905b80821115612492578054600160a060020a031916815560010161270e5600436f6d70616e7920646f65736e27742065786973742e00000000000000000000a165627a7a72305820dbf4d677c8229f02cfa059083684c563c53f59640cbba77bebd72ae28d50672b0029";

    protected Loyalty(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Loyalty(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<AddCompanyEventResponse> getAddCompanyEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddCompany", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<AddCompanyEventResponse> responses = new ArrayList<AddCompanyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddCompanyEventResponse typedResponse = new AddCompanyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.companyAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.phoneNumber = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddCompanyEventResponse> addCompanyEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddCompany", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddCompanyEventResponse>() {
            @Override
            public AddCompanyEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                AddCompanyEventResponse typedResponse = new AddCompanyEventResponse();
                typedResponse.log = log;
                typedResponse.companyAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.name = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.phoneNumber = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<AddCustomerEventResponse> getAddCustomerEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AddCustomer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<AddCustomerEventResponse> responses = new ArrayList<AddCustomerEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddCustomerEventResponse typedResponse = new AddCustomerEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.customerAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AddCustomerEventResponse> addCustomerEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AddCustomer", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AddCustomerEventResponse>() {
            @Override
            public AddCustomerEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                AddCustomerEventResponse typedResponse = new AddCustomerEventResponse();
                typedResponse.log = log;
                typedResponse.customerAddress = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LoggedInEventResponse> getLoggedInEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("LoggedIn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LoggedInEventResponse> responses = new ArrayList<LoggedInEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LoggedInEventResponse typedResponse = new LoggedInEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LoggedInEventResponse> loggedInEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("LoggedIn", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LoggedInEventResponse>() {
            @Override
            public LoggedInEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LoggedInEventResponse typedResponse = new LoggedInEventResponse();
                typedResponse.log = log;
                typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<LogEventResponse> getLogEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Log", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(event, transactionReceipt);
        ArrayList<LogEventResponse> responses = new ArrayList<LogEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LogEventResponse typedResponse = new LogEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<LogEventResponse> logEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Log", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, LogEventResponse>() {
            @Override
            public LogEventResponse call(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(event, log);
                LogEventResponse typedResponse = new LogEventResponse();
                typedResponse.log = log;
                typedResponse._address = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<TransactionReceipt> addCoalition(String coalition, String _name) {
        final Function function = new Function(
                "addCoalition", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(coalition), 
                new org.web3j.abi.datatypes.Utf8String(_name)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setToken(String _name, BigInteger _inPrice, BigInteger _outPrice, BigInteger _exchangePrice) {
        final Function function = new Function(
                "setToken", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_inPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(_outPrice), 
                new org.web3j.abi.datatypes.generated.Uint256(_exchangePrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<Boolean, BigInteger>> customers(String param0) {
        final Function function = new Function("customers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple2<Boolean, BigInteger>>(
                new Callable<Tuple2<Boolean, BigInteger>>() {
                    @Override
                    public Tuple2<Boolean, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<Boolean, String, String, String, BigInteger, BigInteger>> companies(String param0) {
        final Function function = new Function("companies", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<Boolean, String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple6<Boolean, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<Boolean, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Boolean, String, String, String, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<Tuple2<Boolean, String>> coalitions(String param0) {
        final Function function = new Function("coalitions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple2<Boolean, String>>(
                new Callable<Tuple2<Boolean, String>>() {
                    @Override
                    public Tuple2<Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Boolean, String>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<Tuple6<Boolean, String, String, String, BigInteger, BigInteger>> companySet(BigInteger param0) {
        final Function function = new Function("companySet", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple6<Boolean, String, String, String, BigInteger, BigInteger>>(
                new Callable<Tuple6<Boolean, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<Boolean, String, String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Boolean, String, String, String, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> companiesCount() {
        final Function function = new Function("companiesCount", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> addEther(BigInteger weiValue) {
        final Function function = new Function(
                "addEther", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> owner() {
        final Function function = new Function("owner", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> allTokens(String param0) {
        final Function function = new Function("allTokens", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> inviteToCoalition(String company) {
        final Function function = new Function(
                "inviteToCoalition", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferBonuses(String company, String customer, BigInteger roublesAmount, BigInteger bonusesAmount, String tokenOwner) {
        final Function function = new Function(
                "transferBonuses", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company), 
                new org.web3j.abi.datatypes.Address(customer), 
                new org.web3j.abi.datatypes.generated.Uint256(roublesAmount), 
                new org.web3j.abi.datatypes.generated.Uint256(bonusesAmount), 
                new org.web3j.abi.datatypes.Address(tokenOwner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCompany(String company, String _name, BigInteger _phoneNumber) {
        final Function function = new Function(
                "addCompany", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(company), 
                new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.generated.Uint256(_phoneNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple2<String, String>> getRequest() {
        final Function function = new Function("getRequest", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}));
        return new RemoteCall<Tuple2<String, String>>(
                new Callable<Tuple2<String, String>>() {
                    @Override
                    public Tuple2<String, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, String>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> respond(String request_sender, Boolean answer) {
        final Function function = new Function(
                "respond", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(request_sender), 
                new org.web3j.abi.datatypes.Bool(answer)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCustomer(String customer, BigInteger _phoneNumber) {
        final Function function = new Function(
                "addCustomer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(customer), 
                new org.web3j.abi.datatypes.generated.Uint256(_phoneNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static RemoteCall<Loyalty> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Loyalty.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Loyalty> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Loyalty.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static Loyalty load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Loyalty(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static Loyalty load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Loyalty(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class AddCompanyEventResponse {
        public Log log;

        public String companyAddress;

        public String name;

        public BigInteger phoneNumber;
    }

    public static class AddCustomerEventResponse {
        public Log log;

        public String customerAddress;

        public BigInteger number;
    }

    public static class LoggedInEventResponse {
        public Log log;

        public String _address;

        public BigInteger number;
    }

    public static class LogEventResponse {
        public Log log;

        public String _address;
    }
}
